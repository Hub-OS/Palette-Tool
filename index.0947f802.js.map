{"mappings":"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","sources":["<anon>","src/index.ts","src/file-loading.ts","src/input-images.ts","src/palette-workspace.ts"],"sourcesContent":["function $a9cec9f5d2c68d09$export$cc0e7cb90ac4067f(file) {\n    return new Promise((resolve, reject)=>{\n        // load file as data url, then load as image\n        const reader = new FileReader();\n        reader.onload = function() {\n            // load image\n            const image = new Image();\n            image.src = reader.result;\n            image.onload = function() {\n                resolve(image);\n            };\n            image.onerror = function() {\n                reject(new Error(`Failed to load \"${file.name}\"`));\n            };\n        };\n        reader.onerror = function() {\n            reject(new Error(`Failed to load \"${file.name}: ${reader.error}\"`));\n        };\n        reader.readAsDataURL(file);\n    });\n}\n\n\nfunction $905062cf1895f308$export$9b2ff4fb61b7dfca(images) {\n    if (images.imageError) return images.imageError;\n    else if (!images.image) return \"Missing image file\";\n    else if (images.imageType == \"grayscale\" && !images.paletteImage) return \"Missing palette file\";\n}\n\n\nclass $ffb8c23cfbad9968$export$2e2bcd8739ae039 {\n    #colorCanvas;\n    #colorCtx;\n    #paletteCanvas;\n    #paletteCtx;\n    #grayCanvas;\n    #grayCtx;\n    #colorToIndex;\n    constructor(params){\n        this.#colorToIndex = {};\n        const ctxOpt = {\n            willReadFrequently: true\n        };\n        this.#colorCanvas = params.colorCanvas;\n        this.#colorCtx = this.#colorCanvas.getContext(\"2d\", ctxOpt);\n        this.#paletteCanvas = params.paletteCanvas;\n        this.#paletteCtx = this.#paletteCanvas.getContext(\"2d\", ctxOpt);\n        this.#grayCanvas = params.grayCanvas;\n        this.#grayCtx = this.#grayCanvas.getContext(\"2d\", ctxOpt);\n        this.#bindPaletteCanvasListeners();\n    }\n    #bindPaletteCanvasListeners() {\n        let canvas = this.#paletteCanvas;\n        let mouseX = 0;\n        let mouseDown = false;\n        const resolveMousePosition = (event)=>{\n            const boundingRect = canvas.getBoundingClientRect();\n            const inverseScale = 256 / boundingRect.width;\n            mouseX = Math.floor((event.clientX - boundingRect.left) * inverseScale);\n        };\n        canvas.addEventListener(\"mousedown\", (event)=>{\n            if (event.button != 0) return;\n            resolveMousePosition(event);\n            mouseDown = true;\n        });\n        document.body.addEventListener(\"mousemove\", (event)=>{\n            if (!mouseDown) return;\n            let oldX = mouseX;\n            resolveMousePosition(event);\n            let newX = mouseX;\n            if (oldX == newX) // no need to swap\n            return;\n            const paletteData = this.#paletteCtx.getImageData(0, 0, 256, 1);\n            // get old colors\n            const oldOffset = oldX * 4;\n            const newOffset = newX * 4;\n            const oldR = paletteData.data[oldOffset];\n            const oldG = paletteData.data[oldOffset + 1];\n            const oldB = paletteData.data[oldOffset + 2];\n            const oldA = paletteData.data[oldOffset + 3];\n            const oldHash = $ffb8c23cfbad9968$var$hashColor(oldR, oldG, oldB, oldA);\n            const newR = paletteData.data[newOffset];\n            const newG = paletteData.data[newOffset + 1];\n            const newB = paletteData.data[newOffset + 2];\n            const newA = paletteData.data[newOffset + 3];\n            const newHash = $ffb8c23cfbad9968$var$hashColor(newR, newG, newB, newA);\n            // swap indices\n            if (this.#colorToIndex[oldHash] == oldX) this.#colorToIndex[oldHash] = newX;\n            if (this.#colorToIndex[newHash] == newX) this.#colorToIndex[newHash] = oldX;\n            // swap colors\n            paletteData.data[oldOffset] = newR;\n            paletteData.data[oldOffset + 1] = newG;\n            paletteData.data[oldOffset + 2] = newB;\n            paletteData.data[oldOffset + 3] = newA;\n            paletteData.data[newOffset] = oldR;\n            paletteData.data[newOffset + 1] = oldG;\n            paletteData.data[newOffset + 2] = oldB;\n            paletteData.data[newOffset + 3] = oldA;\n            this.#paletteCtx.clearRect(0, 0, 256, 1);\n            this.#paletteCtx.putImageData(paletteData, 0, 0);\n            // recreate grayscale\n            this.#renderGrayscale();\n        });\n        document.body.addEventListener(\"mouseup\", ()=>{\n            mouseDown = false;\n        });\n    }\n    loadImages(input) {\n        const image = input.image;\n        this.#colorCanvas.width = image.width;\n        this.#colorCanvas.height = image.height;\n        this.#grayCanvas.width = image.width;\n        this.#grayCanvas.height = image.height;\n        if (input.imageType == \"color\") this.#colorCtx.drawImage(image, 0, 0);\n        else this.#grayCtx.drawImage(image, 0, 0);\n        if (input.paletteImage) this.#loadPalette(input.paletteImage);\n        else this.#generatePalette();\n        if (input.imageType == \"color\") this.#renderGrayscale();\n        else this.#renderColor();\n    }\n    #loadPalette(image) {\n        this.#paletteCtx.clearRect(0, 0, 256, 1);\n        this.#paletteCtx.drawImage(image, 0, 0);\n        const imageData = this.#paletteCtx.getImageData(0, 0, 256, 1);\n        this.#colorToIndex = {};\n        for(let i = 0; i < 1024; i += 4){\n            const r = imageData.data[i];\n            const g = imageData.data[i + 1];\n            const b = imageData.data[i + 2];\n            const a = imageData.data[i + 3];\n            const hash = $ffb8c23cfbad9968$var$hashColor(r, g, b, a);\n            if (this.#colorToIndex[hash] == undefined) this.#colorToIndex[hash] = i / 4;\n        }\n    }\n    #generatePalette() {\n        const width = this.#colorCanvas.width;\n        const height = this.#colorCanvas.height;\n        const imageData = this.#colorCtx.getImageData(0, 0, width, height);\n        this.#colorToIndex = {\n            [0]: 0\n        };\n        let uniqueColors = 0;\n        this.#paletteCtx.clearRect(0, 0, 256, 1);\n        for(let i = 0; i < width * height * 4; i += 4){\n            const r = imageData.data[i];\n            const g = imageData.data[i + 1];\n            const b = imageData.data[i + 2];\n            const a = imageData.data[i + 3];\n            const hash = $ffb8c23cfbad9968$var$hashColor(r, g, b, a);\n            if (hash != 0 && this.#colorToIndex[hash] == undefined) {\n                uniqueColors += 1;\n                this.#colorToIndex[hash] = uniqueColors;\n                this.#paletteCtx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a / 255})`;\n                this.#paletteCtx.fillRect(uniqueColors, 0, 1, 1);\n            }\n        }\n    }\n    #renderGrayscale() {\n        const width = this.#colorCanvas.width;\n        const height = this.#colorCanvas.height;\n        const imageData = this.#colorCtx.getImageData(0, 0, width, height);\n        for(let i = 0; i < width * height * 4; i += 4){\n            const r = imageData.data[i];\n            const g = imageData.data[i + 1];\n            const b = imageData.data[i + 2];\n            const a = imageData.data[i + 3];\n            const hash = $ffb8c23cfbad9968$var$hashColor(r, g, b, a);\n            const colorIndex = this.#colorToIndex[hash];\n            imageData.data[i] = colorIndex;\n            imageData.data[i + 1] = colorIndex;\n            imageData.data[i + 2] = colorIndex;\n            imageData.data[i + 3] = colorIndex == 0 ? 0 : 255;\n        }\n        this.#grayCtx.clearRect(0, 0, width, height);\n        this.#grayCtx.putImageData(imageData, 0, 0);\n    }\n    #renderColor() {\n        const width = this.#colorCanvas.width;\n        const height = this.#colorCanvas.height;\n        const imageData = this.#grayCtx.getImageData(0, 0, width, height);\n        const paletteData = this.#paletteCtx.getImageData(0, 0, 256, 1);\n        for(let i = 0; i < width * height * 4; i += 4){\n            const colorI = imageData.data[i] * 4;\n            imageData.data[i] = paletteData.data[colorI];\n            imageData.data[i + 1] = paletteData.data[colorI + 1];\n            imageData.data[i + 2] = paletteData.data[colorI + 2];\n            imageData.data[i + 3] = paletteData.data[colorI + 3];\n        }\n        this.#colorCtx.clearRect(0, 0, width, height);\n        this.#colorCtx.putImageData(imageData, 0, 0);\n    }\n}\nfunction $ffb8c23cfbad9968$var$hashColor(r, g, b, a) {\n    if (a == 0) return 0;\n    return r << 24 | g << 16 | b << 8 | a;\n}\n\n\nconst $b4e14b6b8da86996$var$imageTypeDialogElement = document.getElementById(\"image-type-dialog\");\nconst $b4e14b6b8da86996$var$workspace = new (0, $ffb8c23cfbad9968$export$2e2bcd8739ae039)({\n    paletteCanvas: document.getElementById(\"palette\"),\n    colorCanvas: document.getElementById(\"color\"),\n    grayCanvas: document.getElementById(\"grayscale\")\n});\nconst $b4e14b6b8da86996$var$pendingImages = {};\nfunction $b4e14b6b8da86996$var$logError(error) {\n    console.error(error);\n    alert(error);\n}\ndocument.body.addEventListener(\"dragover\", (event)=>event.preventDefault());\ndocument.body.addEventListener(\"drop\", (event)=>{\n    const items = event.dataTransfer?.items;\n    if (!items) return;\n    event.preventDefault();\n    const files = [];\n    for (const item of items){\n        const file = item.getAsFile();\n        if (file) files.push(file);\n    }\n    $b4e14b6b8da86996$var$loadFiles(files).catch($b4e14b6b8da86996$var$logError).finally(()=>{\n        $b4e14b6b8da86996$var$tryLoadPending();\n    });\n});\nfunction $b4e14b6b8da86996$var$tryLoadPending() {\n    const errorMessage = (0, $905062cf1895f308$export$9b2ff4fb61b7dfca)($b4e14b6b8da86996$var$pendingImages);\n    const errorElement = document.getElementById(\"error\");\n    errorElement.innerText = errorMessage || \"\";\n    if (!errorMessage && $b4e14b6b8da86996$var$pendingImages.imageType) {\n        $b4e14b6b8da86996$var$workspace.loadImages($b4e14b6b8da86996$var$pendingImages);\n        // reset palette image\n        $b4e14b6b8da86996$var$pendingImages.paletteImage = undefined;\n    }\n}\nasync function $b4e14b6b8da86996$var$loadFiles(files) {\n    for (const file of files){\n        if (file.name.endsWith(\".png\")) try {\n            const image = await (0, $a9cec9f5d2c68d09$export$cc0e7cb90ac4067f)(file);\n            if (image.height == 1 && image.width == 256) $b4e14b6b8da86996$var$pendingImages.paletteImage = image;\n            else {\n                $b4e14b6b8da86996$var$pendingImages.image = image;\n                $b4e14b6b8da86996$var$pendingImages.imageType = undefined;\n            }\n            $b4e14b6b8da86996$var$pendingImages.imageError = undefined;\n        } catch (error) {\n            console.error(error);\n            $b4e14b6b8da86996$var$pendingImages.imageError = error.toString();\n        }\n    }\n    if ($b4e14b6b8da86996$var$pendingImages.image && !$b4e14b6b8da86996$var$pendingImages.imageType) $b4e14b6b8da86996$var$imageTypeDialogElement.show();\n}\nfunction $b4e14b6b8da86996$var$createImageTypeSetter(type) {\n    return function() {\n        $b4e14b6b8da86996$var$pendingImages.imageType = type;\n        $b4e14b6b8da86996$var$imageTypeDialogElement.close();\n        $b4e14b6b8da86996$var$tryLoadPending();\n    };\n}\ndocument.getElementById(\"set-color\").onclick = $b4e14b6b8da86996$var$createImageTypeSetter(\"color\");\ndocument.getElementById(\"set-grayscale\").onclick = $b4e14b6b8da86996$var$createImageTypeSetter(\"grayscale\");\n\n\n//# sourceMappingURL=index.0947f802.js.map\n","import { loadImageFile } from \"./file-loading\";\nimport { InputImages, resolveSingleErrorMessage } from \"./input-images\";\nimport PaletteWorkspace from \"./palette-workspace\";\n\nconst imageTypeDialogElement = document.getElementById(\n  \"image-type-dialog\"\n) as HTMLDialogElement;\n\nconst workspace = new PaletteWorkspace({\n  paletteCanvas: document.getElementById(\"palette\") as HTMLCanvasElement,\n  colorCanvas: document.getElementById(\"color\") as HTMLCanvasElement,\n  grayCanvas: document.getElementById(\"grayscale\") as HTMLCanvasElement,\n});\n\nconst pendingImages: InputImages = {};\n\nfunction logError(error: string) {\n  console.error(error);\n  alert(error);\n}\n\ndocument.body.addEventListener(\"dragover\", (event) => event.preventDefault());\ndocument.body.addEventListener(\"drop\", (event) => {\n  const items = event.dataTransfer?.items;\n\n  if (!items) {\n    return;\n  }\n\n  event.preventDefault();\n\n  const files: File[] = [];\n\n  for (const item of items) {\n    const file = item.getAsFile();\n\n    if (file) {\n      files.push(file);\n    }\n  }\n\n  loadFiles(files)\n    .catch(logError)\n    .finally(() => {\n      tryLoadPending();\n    });\n});\n\nfunction tryLoadPending() {\n  const errorMessage = resolveSingleErrorMessage(pendingImages);\n\n  const errorElement = document.getElementById(\"error\")! as HTMLDivElement;\n\n  errorElement.innerText = errorMessage || \"\";\n\n  if (!errorMessage && pendingImages.imageType) {\n    workspace.loadImages(pendingImages);\n    // reset palette image\n    pendingImages.paletteImage = undefined;\n  }\n}\n\nasync function loadFiles(files: File[]) {\n  for (const file of files) {\n    if (file.name.endsWith(\".png\")) {\n      try {\n        const image = await loadImageFile(file);\n\n        if (image.height == 1 && image.width == 256) {\n          pendingImages.paletteImage = image;\n        } else {\n          pendingImages.image = image;\n          pendingImages.imageType = undefined;\n        }\n\n        pendingImages.imageError = undefined;\n      } catch (error) {\n        console.error(error);\n        pendingImages.imageError = error!.toString();\n      }\n    }\n  }\n\n  if (pendingImages.image && !pendingImages.imageType) {\n    imageTypeDialogElement.show();\n  }\n}\n\nfunction createImageTypeSetter(type: \"color\" | \"grayscale\") {\n  return function () {\n    pendingImages.imageType = type;\n    imageTypeDialogElement.close();\n    tryLoadPending();\n  };\n}\n\ndocument.getElementById(\"set-color\")!.onclick = createImageTypeSetter(\"color\");\n\ndocument.getElementById(\"set-grayscale\")!.onclick =\n  createImageTypeSetter(\"grayscale\");\n","export function loadImageFile(file: File): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    // load file as data url, then load as image\n    const reader = new FileReader();\n\n    reader.onload = function () {\n      // load image\n      const image = new Image();\n\n      image.src = reader.result as string;\n\n      image.onload = function () {\n        resolve(image);\n      };\n\n      image.onerror = function () {\n        reject(new Error(`Failed to load \"${file.name}\"`));\n      };\n    };\n\n    reader.onerror = function () {\n      reject(new Error(`Failed to load \"${file.name}: ${reader.error}\"`));\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n","export type InputImages = {\n  imageType?: \"color\" | \"grayscale\";\n  image?: HTMLImageElement;\n  paletteImage?: HTMLImageElement;\n  imageError?: string;\n};\n\nexport function resolveSingleErrorMessage(\n  images: InputImages\n): string | undefined {\n  if (images.imageError) {\n    return images.imageError;\n  } else if (!images.image) {\n    return \"Missing image file\";\n  } else if (images.imageType == \"grayscale\" && !images.paletteImage) {\n    return \"Missing palette file\";\n  }\n}\n","import { InputImages } from \"./input-images\";\n\ntype PaletteWorkspaceConstructorParams = {\n  colorCanvas: HTMLCanvasElement;\n  paletteCanvas: HTMLCanvasElement;\n  grayCanvas: HTMLCanvasElement;\n};\n\nexport default class PaletteWorkspace {\n  #colorCanvas: HTMLCanvasElement;\n  #colorCtx: CanvasRenderingContext2D;\n  #paletteCanvas: HTMLCanvasElement;\n  #paletteCtx: CanvasRenderingContext2D;\n  #grayCanvas: HTMLCanvasElement;\n  #grayCtx: CanvasRenderingContext2D;\n\n  #colorToIndex: { [hash: number]: number } = {};\n\n  constructor(params: PaletteWorkspaceConstructorParams) {\n    const ctxOpt = {\n      willReadFrequently: true,\n    };\n\n    type Ctx = CanvasRenderingContext2D;\n\n    this.#colorCanvas = params.colorCanvas;\n    this.#colorCtx = this.#colorCanvas.getContext(\"2d\", ctxOpt)! as Ctx;\n\n    this.#paletteCanvas = params.paletteCanvas;\n    this.#paletteCtx = this.#paletteCanvas.getContext(\"2d\", ctxOpt)! as Ctx;\n\n    this.#grayCanvas = params.grayCanvas;\n    this.#grayCtx = this.#grayCanvas.getContext(\"2d\", ctxOpt) as Ctx;\n\n    this.#bindPaletteCanvasListeners();\n  }\n\n  #bindPaletteCanvasListeners() {\n    let canvas = this.#paletteCanvas;\n\n    let mouseX = 0;\n    let mouseDown = false;\n\n    const resolveMousePosition = (event: MouseEvent) => {\n      const boundingRect = canvas.getBoundingClientRect();\n      const inverseScale = 256 / boundingRect.width;\n\n      mouseX = Math.floor((event.clientX - boundingRect.left) * inverseScale);\n    };\n\n    canvas.addEventListener(\"mousedown\", (event) => {\n      if (event.button != 0) {\n        return;\n      }\n\n      resolveMousePosition(event);\n\n      mouseDown = true;\n    });\n\n    document.body.addEventListener(\"mousemove\", (event) => {\n      if (!mouseDown) {\n        return;\n      }\n\n      let oldX = mouseX;\n      resolveMousePosition(event);\n      let newX = mouseX;\n\n      if (oldX == newX) {\n        // no need to swap\n        return;\n      }\n\n      const paletteData = this.#paletteCtx.getImageData(0, 0, 256, 1);\n\n      // get old colors\n      const oldOffset = oldX * 4;\n      const newOffset = newX * 4;\n\n      const oldR = paletteData.data[oldOffset];\n      const oldG = paletteData.data[oldOffset + 1];\n      const oldB = paletteData.data[oldOffset + 2];\n      const oldA = paletteData.data[oldOffset + 3];\n      const oldHash = hashColor(oldR, oldG, oldB, oldA);\n\n      const newR = paletteData.data[newOffset];\n      const newG = paletteData.data[newOffset + 1];\n      const newB = paletteData.data[newOffset + 2];\n      const newA = paletteData.data[newOffset + 3];\n      const newHash = hashColor(newR, newG, newB, newA);\n\n      // swap indices\n      if (this.#colorToIndex[oldHash] == oldX) {\n        this.#colorToIndex[oldHash] = newX;\n      }\n\n      if (this.#colorToIndex[newHash] == newX) {\n        this.#colorToIndex[newHash] = oldX;\n      }\n\n      // swap colors\n      paletteData.data[oldOffset] = newR;\n      paletteData.data[oldOffset + 1] = newG;\n      paletteData.data[oldOffset + 2] = newB;\n      paletteData.data[oldOffset + 3] = newA;\n\n      paletteData.data[newOffset] = oldR;\n      paletteData.data[newOffset + 1] = oldG;\n      paletteData.data[newOffset + 2] = oldB;\n      paletteData.data[newOffset + 3] = oldA;\n\n      this.#paletteCtx.clearRect(0, 0, 256, 1);\n      this.#paletteCtx.putImageData(paletteData, 0, 0);\n\n      // recreate grayscale\n      this.#renderGrayscale();\n    });\n\n    document.body.addEventListener(\"mouseup\", () => {\n      mouseDown = false;\n    });\n  }\n\n  loadImages(input: InputImages) {\n    const image = input.image!;\n\n    this.#colorCanvas.width = image.width;\n    this.#colorCanvas.height = image.height;\n    this.#grayCanvas.width = image.width;\n    this.#grayCanvas.height = image.height;\n\n    if (input.imageType == \"color\") {\n      this.#colorCtx.drawImage(image, 0, 0);\n    } else {\n      this.#grayCtx.drawImage(image, 0, 0);\n    }\n\n    if (input.paletteImage) {\n      this.#loadPalette(input.paletteImage);\n    } else {\n      this.#generatePalette();\n    }\n\n    if (input.imageType == \"color\") {\n      this.#renderGrayscale();\n    } else {\n      this.#renderColor();\n    }\n  }\n\n  #loadPalette(image: HTMLImageElement) {\n    this.#paletteCtx.clearRect(0, 0, 256, 1);\n    this.#paletteCtx.drawImage(image, 0, 0);\n    const imageData = this.#paletteCtx.getImageData(0, 0, 256, 1);\n\n    this.#colorToIndex = {};\n\n    for (let i = 0; i < 256 * 4; i += 4) {\n      const r = imageData.data[i];\n      const g = imageData.data[i + 1];\n      const b = imageData.data[i + 2];\n      const a = imageData.data[i + 3];\n\n      const hash = hashColor(r, g, b, a);\n\n      if (this.#colorToIndex[hash] == undefined) {\n        this.#colorToIndex[hash] = i / 4;\n      }\n    }\n  }\n\n  #generatePalette() {\n    const width = this.#colorCanvas.width;\n    const height = this.#colorCanvas.height;\n    const imageData = this.#colorCtx.getImageData(0, 0, width, height);\n\n    this.#colorToIndex = { [0]: 0 };\n    let uniqueColors = 0;\n\n    this.#paletteCtx.clearRect(0, 0, 256, 1);\n\n    for (let i = 0; i < width * height * 4; i += 4) {\n      const r = imageData.data[i];\n      const g = imageData.data[i + 1];\n      const b = imageData.data[i + 2];\n      const a = imageData.data[i + 3];\n\n      const hash = hashColor(r, g, b, a);\n\n      if (hash != 0 && this.#colorToIndex[hash] == undefined) {\n        uniqueColors += 1;\n        this.#colorToIndex[hash] = uniqueColors;\n\n        this.#paletteCtx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a / 255})`;\n        this.#paletteCtx.fillRect(uniqueColors, 0, 1, 1);\n      }\n    }\n  }\n\n  #renderGrayscale() {\n    const width = this.#colorCanvas.width;\n    const height = this.#colorCanvas.height;\n    const imageData = this.#colorCtx.getImageData(0, 0, width, height);\n\n    for (let i = 0; i < width * height * 4; i += 4) {\n      const r = imageData.data[i];\n      const g = imageData.data[i + 1];\n      const b = imageData.data[i + 2];\n      const a = imageData.data[i + 3];\n\n      const hash = hashColor(r, g, b, a);\n      const colorIndex = this.#colorToIndex[hash];\n\n      imageData.data[i] = colorIndex;\n      imageData.data[i + 1] = colorIndex;\n      imageData.data[i + 2] = colorIndex;\n      imageData.data[i + 3] = colorIndex == 0 ? 0 : 255;\n    }\n\n    this.#grayCtx.clearRect(0, 0, width, height);\n    this.#grayCtx.putImageData(imageData, 0, 0);\n  }\n\n  #renderColor() {\n    const width = this.#colorCanvas.width;\n    const height = this.#colorCanvas.height;\n    const imageData = this.#grayCtx.getImageData(0, 0, width, height);\n    const paletteData = this.#paletteCtx.getImageData(0, 0, 256, 1);\n\n    for (let i = 0; i < width * height * 4; i += 4) {\n      const colorI = imageData.data[i] * 4;\n\n      imageData.data[i] = paletteData.data[colorI];\n      imageData.data[i + 1] = paletteData.data[colorI + 1];\n      imageData.data[i + 2] = paletteData.data[colorI + 2];\n      imageData.data[i + 3] = paletteData.data[colorI + 3];\n    }\n\n    this.#colorCtx.clearRect(0, 0, width, height);\n    this.#colorCtx.putImageData(imageData, 0, 0);\n  }\n}\n\nfunction hashColor(r: number, g: number, b: number, a: number) {\n  if (a == 0) {\n    return 0;\n  }\n\n  return (r << 24) | (g << 16) | (b << 8) | a;\n}\n"],"names":["$ffb8c23cfbad9968$var$hashColor","r","g","b","a","$b4e14b6b8da86996$var$imageTypeDialogElement","document","getElementById","$b4e14b6b8da86996$var$workspace","colorCanvas","colorCtx","paletteCanvas","paletteCtx","grayCanvas","grayCtx","colorToIndex","constructor","params","ctxOpt","willReadFrequently","getContext","bindPaletteCanvasListeners","canvas","mouseX","mouseDown","resolveMousePosition","event","boundingRect","getBoundingClientRect","inverseScale","width","Math","floor","clientX","left","addEventListener","button","body","oldX","newX","paletteData","getImageData","oldOffset","newOffset","oldR","data","oldG","oldB","oldA","oldHash","newR","newG","newB","newA","newHash","clearRect","putImageData","renderGrayscale","loadImages","input","image","height","imageType","drawImage","paletteImage","loadPalette","generatePalette","renderColor","imageData","i","hash","undefined","uniqueColors","fillStyle","fillRect","colorIndex","colorI","$b4e14b6b8da86996$var$pendingImages","$b4e14b6b8da86996$var$logError","error","console","alert","$b4e14b6b8da86996$var$tryLoadPending","errorMessage","images","imageError","errorElement","innerText","$b4e14b6b8da86996$var$loadFiles","files","file","name","endsWith","Promise","resolve","reject","reader","FileReader","onload","Image","src","result","onerror","Error","readAsDataURL","toString","show","$b4e14b6b8da86996$var$createImageTypeSetter","type","close","preventDefault","items","dataTransfer","item","getAsFile","push","catch","finally","onclick"],"version":3,"file":"index.0947f802.js.map"}